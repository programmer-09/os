1)arithmetic:

#!/bin/bash
echo "addition of two number"
var=$((2+7))
echo $var

echo "substraction of two number"
var1=$((7-2))
echo $var1

echo "multiplication of two numbers"
var2=$((7*2))
echo $var2

echo "divisionof 2 numbers:"
var3=$((4/4))
echo $var3



2)substring:
#!/bin/bash

# Read inputs
read -p "Enter the main string: " main_string
read -p "Enter the substring to search for: " search_substring

# Find the position of the substring
position=$(expr match "$main_string" ".*$search_substring")

# Check if the substring exists and output result
if [[ $position -gt 0 ]]; then
    start_position=$((position - ${#search_substring} + 1))
    echo "The substring '$search_substring' is found at position: $start_position"
else
    echo "The substring '$search_substring' is not found in the main string."
fi


3)sorting :bubblesort
#!/bin/bash

read -p "Enter integers separated by spaces: " -a arr

n=${#arr[@]}
echo $n
for ((i = 0; i<n; i++))
do
    
    for ((j = 0; j<n-1; j++))
    do
    
        if [ ${arr[j]} -gt ${arr[$((j+1))]} ]
        then
            temp=${arr[j]}
            arr[$j]=${arr[$((j+1))]}  
            arr[$((j+1))]=$temp
        fi
    done
done

echo "Array in sorted order :"
echo ${arr[@]}


4)upper to lower:

#!/bin/bash

read -p "enter the string in uppercase to convert to lowercase" utl
t=${utl,,}
echo "$t"


read -p "enter the string in lower to convert to uppercase" ltu
t1=${ltu^^}
echo "$t1"

5)palindrome:
#!/bin/bash

read -p "enter a string " input_string

reversed_string=$(echo "$input_string" |rev)

if [[ "$input_string" == "reversed_string" ]]; then
    echo "the entered string '$input_string' is a pallindrome ."
else
    echo "the entered string '$input_string' is not a pallindrome."
Fi







awk:

1)student :
student.awk

BEGIN{
    FS=" : ";
    OFS ="\t";
    print "student report"
    print "________________________________"
    print "Name \t Average \t Grade"
}

NR >1 {
     avg=($3 +$4 +$5) /3
     if (avg <=50)
          grade ="\t F"
     else if (avg > 50)
          grade ="\t  Pass"
     print $2 ,avg ,grade
}

END{
    print "end of report"
    print " ____________________________________"
}    







input.txt:

id: name : m1 : m2 : m3
1 :  a   : 50 : 70 : 60
2 :  b   : 60 : 90 : 86
3 :  c   : 63 : 50 : 77


2) employee

employee.awk
BEGIN {
    print "Report"
}

{
    sal = $3
    da = 0.50 * sal
    hra = 0.30 * sal
    gs = sal - da - hra
    grade = "F"

    print $2, da, hra, gs
}

END {
    print "END"
}






input.txt

1   a   10000   20  35
2   B   32222   12  45
3   c   32224   45  30





assign 
producer consumer
mutex

import threading
import random
import time

BUFFER_SIZE = 5
buffer = [None] * BUFFER_SIZE
in_pos = out_pos = count = 0

# Mutex lock and condition variables
buffer_lock = threading.Lock()
buffer_not_empty = threading.Condition(buffer_lock)
buffer_not_full = threading.Condition(buffer_lock)

def producer(producer_id):
    global in_pos, count
    for _ in range(10):
        item = random.randint(1, 100)
        with buffer_not_full:
            while count == BUFFER_SIZE:
                print(f"Producer {producer_id} blocked, buffer is full.")
                buffer_not_full.wait()
            buffer[in_pos] = item
            print(f"Producer {producer_id} inserted {item} in slot {in_pos}.")
            in_pos = (in_pos + 1) % BUFFER_SIZE
            count += 1
            buffer_not_empty.notify()
        time.sleep(random.uniform(0.1, 0.5))

def consumer(consumer_id):
    global out_pos, count
    for _ in range(10):
        with buffer_not_empty:
            while count == 0:
                print(f"Consumer {consumer_id} blocked, buffer is empty.")
                buffer_not_empty.wait()
            item = buffer[out_pos]
            print(f"Consumer {consumer_id} consumed {item} from slot {out_pos}.")
            out_pos = (out_pos + 1) % BUFFER_SIZE
            count -= 1
            buffer_not_full.notify()
        time.sleep(random.uniform(0.1, 0.5))

if __name__ == "__main__":
    # Start 2 producers and 2 consumers
    threads = [threading.Thread(target=producer, args=(i+1,)) for i in range(2)] + \
              [threading.Thread(target=consumer, args=(i+1,)) for i in range(2)]
    for t in threads:
        t.start()
    for t in threads:
        t.join()

    print("Producer-Consumer process finished.")


producers semaphore
import threading
import random
import time

BUFFER_SIZE = 5
buffer = [None] * BUFFER_SIZE
in_pos = out_pos = count = 0

# Semaphore objects
empty_slots = threading.Semaphore(BUFFER_SIZE)  # Tracks empty slots in the buffer
filled_slots = threading.Semaphore(0)           # Tracks filled slots in the buffer
buffer_lock = threading.Semaphore(1)            # Mutex for accessing the buffer

def producer(producer_id):
    global in_pos, count
    for _ in range(10):
        item = random.randint(1, 100)
        empty_slots.acquire()  # Wait for an empty slot
        with buffer_lock:      # Lock the buffer for insertion
            buffer[in_pos] = item
            print(f"Producer {producer_id} inserted {item} in slot {in_pos}.")
            in_pos = (in_pos + 1) % BUFFER_SIZE
            count += 1
        filled_slots.release()  # Signal that a slot is filled
        time.sleep(random.uniform(0.1, 0.5))

def consumer(consumer_id):
    global out_pos, count
    for _ in range(10):
        filled_slots.acquire()  # Wait for a filled slot
        with buffer_lock:       # Lock the buffer for removal
            item = buffer[out_pos]
            print(f"Consumer {consumer_id} consumed {item} from slot {out_pos}.")
            out_pos = (out_pos + 1) % BUFFER_SIZE
            count -= 1
        empty_slots.release()   # Signal that a slot is empty
        time.sleep(random.uniform(0.1, 0.5))

if __name__ == "__main__":
    # Start 2 producers and 2 consumers
    threads = [threading.Thread(target=producer, args=(i+1,)) for i in range(2)] + \
              [threading.Thread(target=consumer, args=(i+1,)) for i in range(2)]
    for t in threads:
        t.start()
    for t in threads:
        t.join()

    print("Producer-Consumer process finished.")


readers mutex
import threading
import time

# Locks (Mutex)
resource_lock = threading.Lock()
read_count_lock = threading.Lock()
read_count = 0

def reader(reader_id):
    global read_count
    read_count_lock.acquire()
    read_count += 1
    if read_count == 1:
        resource_lock.acquire()  # First reader locks the resource
    read_count_lock.release()

    # Reading
    print(f"Reader {reader_id} is reading.")
    time.sleep(1)
    print(f"Reader {reader_id} finished reading at {time.strftime('%H:%M:%S')}")

    read_count_lock.acquire()
    read_count -= 1
    if read_count == 0:
        resource_lock.release()  # Last reader unlocks the resource
    read_count_lock.release()

def writer(writer_id):
    resource_lock.acquire()

    # Writing
    print(f"Writer {writer_id} is writing.")
    time.sleep(1)
    print(f"Writer {writer_id} finished writing at {time.strftime('%H:%M:%S')}")

    resource_lock.release()

# Create threads
readers = [threading.Thread(target=reader, args=(i+1,)) for i in range(3)]
writers = [threading.Thread(target=writer, args=(i+1,)) for i in range(2)]

# Start threads
for t in readers + writers:
    t.start()

# Wait for threads to finish
for t in readers + writers:
    t.join()


readers  semaphore:
import threading
import time

# Semaphores
resource = threading.Semaphore(1)
read_count_access = threading.Semaphore(1)
read_count = 0

def reader(reader_id):
    global read_count
    read_count_access.acquire()
    read_count += 1
    if read_count == 1:
        resource.acquire()  # First reader locks the resource
    read_count_access.release()

    # Reading
    print(f"Reader {reader_id} is reading.")
    time.sleep(1)
    print(f"Reader {reader_id} finished reading at {time.strftime('%H:%M:%S')}")

    read_count_access.acquire()
    read_count -= 1
    if read_count == 0:
        resource.release()  # Last reader unlocks the resource
    read_count_access.release()

def writer(writer_id):
    resource.acquire()

    # Writing
    print(f"Writer {writer_id} is writing.")
    time.sleep(1)
    print(f"Writer {writer_id} finished writing at {time.strftime('%H:%M:%S')}")

    resource.release()

# Create threads
readers = [threading.Thread(target=reader, args=(i+1,)) for i in range(3)]
writers = [threading.Thread(target=writer, args=(i+1,)) for i in range(2)]

# Start threads
for t in readers + writers:
    t.start()

# Wait for threads to finish
for t in readers + writers:
    t.join()



page replacement:

class PageReplacement:
    def __init__(self, capacity, pages):
        self.capacity = capacity
        self.pages = pages

    def fifo(self):
        page_frame = []
        page_faults = 0

        for page in self.pages:
            if page not in page_frame:
                if len(page_frame) >= self.capacity:
                    page_frame.pop(0)  # Remove the first page (FIFO)
                page_frame.append(page)
                page_faults += 1
        
        return page_faults

    def lru(self):
        page_frame = []
        page_faults = 0
        time_stamp = {}

        for time, page in enumerate(self.pages):
            if page not in page_frame:
                if len(page_frame) >= self.capacity:
                    lru_page = min(time_stamp, key=time_stamp.get)  # Find the least recently used
                    page_frame.remove(lru_page)
                    del time_stamp[lru_page]
                page_frame.append(page)
                time_stamp[page] = time  # Update the timestamp
                page_faults += 1
            else:
                time_stamp[page] = time  # Update timestamp for existing pages
        
        return page_faults

    def opt(self):
        page_frame = []
        page_faults = 0

        for i, page in enumerate(self.pages):
            if page not in page_frame:
                if len(page_frame) >= self.capacity:
                    # Find the page that will not be used for the longest period in the future
                    future_use = {}
                    for p in page_frame:
                        future_use[p] = float('inf')  # Default to infinity
                    for j in range(i + 1, len(self.pages)):
                        if self.pages[j] in page_frame and self.pages[j] not in future_use:
                            future_use[self.pages[j]] = j  # Track the future index
                    page_to_replace = max(future_use, key=future_use.get)
                    page_frame.remove(page_to_replace)
                page_frame.append(page)
                page_faults += 1
        
        return page_faults

def simulate_page_replacement(capacity, pages):
    page_replacement = PageReplacement(capacity, pages)

    fifo_faults = page_replacement.fifo()
    lru_faults = page_replacement.lru()
    opt_faults = page_replacement.opt()

    total_requests = len(pages)
    total_faults = fifo_faults + lru_faults + opt_faults

    hit_ratio_fifo = (total_requests - fifo_faults) / total_requests
    miss_ratio_fifo = fifo_faults / total_requests
    hit_ratio_lru = (total_requests - lru_faults) / total_requests
    miss_ratio_lru = lru_faults / total_requests
    hit_ratio_opt = (total_requests - opt_faults) / total_requests
    miss_ratio_opt = opt_faults / total_requests

    print("Page Replacement Simulation Results:")
    print(f"FIFO Page Faults: {fifo_faults}, Hit Ratio: {hit_ratio_fifo:.2f}, Miss Ratio: {miss_ratio_fifo:.2f}")
    print(f"LRU Page Faults: {lru_faults}, Hit Ratio: {hit_ratio_lru:.2f}, Miss Ratio: {miss_ratio_lru:.2f}")
    print(f"OPT Page Faults: {opt_faults}, Hit Ratio: {hit_ratio_opt:.2f}, Miss Ratio: {miss_ratio_opt:.2f}")

# Example usage
if __name__ == "__main__":
    capacity = 3  # Number of frames
    pages = [7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0]  # Page reference string
    simulate_page_replacement(capacity, pages)






Simulate the following CPU scheduling algorithms:
a.	First come First serve  

import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

def plot_gantt_chart(processes, start_times, finish_times):
    fig, gnt = plt.subplots()

    # Setting labels for x-axis and y-axis
    gnt.set_xlabel('Time')
    gnt.set_ylabel('Processes')

    # Setting ticks on y-axis
    gnt.set_yticks([10 * (i + 1) for i in range(len(processes))])
    gnt.set_yticklabels([f'P{pid}' for pid, _, _ in processes])

    # Setting graph limits
    gnt.set_xlim(0, max(finish_times) + 5)
    gnt.set_ylim(0, 10 * (len(processes) + 1))

    # Plotting the bars (tasks)
    colors = ['red', 'green', 'blue', 'orange', 'purple']
    for i, (pid, arrival, burst) in enumerate(processes):
        gnt.broken_barh([(start_times[i], burst)], (10 * (i + 1) - 5, 9), facecolors=(colors[i % len(colors)]))

    # Adding legend
    handles = [mpatches.Patch(color=colors[i % len(colors)], label=f'P{pid}') for i, (pid, _, _) in enumerate(processes)]
    plt.legend(handles=handles)

    # Show the plot at the end
    plt.show()

def fcfs_scheduling_with_gantt(processes):
    n = len(processes)
    processes.sort(key=lambda x: x[1])  # Sort by arrival time

    start_time = 0
    start_times, finish_times = [], []
    turnaround_times, waiting_times = [], []
    
    for i, (pid, arrival, burst) in enumerate(processes):
        if start_time < arrival:
            start_time = arrival
        start_times.append(start_time)
        finish_time = start_time + burst
        finish_times.append(finish_time)
        
        # Turnaround time = Finish time - Arrival time
        turnaround_time = finish_time - arrival
        turnaround_times.append(turnaround_time)
        
        # Waiting time = Turnaround time - Burst time
        waiting_time = turnaround_time - burst
        waiting_times.append(waiting_time)
        
        start_time = finish_time

    # Print details before showing the Gantt chart
    print("\nProcess\tArrival\tBurst\tFinish\tTurnaround\tWaiting")
    for i, (pid, arrival, burst) in enumerate(processes):
        print(f"P{pid}\t{arrival}\t{burst}\t{finish_times[i]}\t{turnaround_times[i]}\t\t{waiting_times[i]}")

    # Call the Gantt chart plotting function
    plot_gantt_chart(processes, start_times, finish_times)

#  input: (Process ID, Arrival Time, Burst Time)
processes = [(1, 0, 4), (2, 1, 3), (3, 2, 1), (4, 3, 2)]
fcfs_scheduling_with_gantt(processes)




    b. Shortest Job First (Non-preemptive)  

import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

def plot_gantt_chart(processes, start_times, finish_times):
    fig, gnt = plt.subplots()

    # Setting labels for x-axis and y-axis
    gnt.set_xlabel('Time')
    gnt.set_ylabel('Processes')

    # Setting ticks on y-axis
    gnt.set_yticks([10 * (i + 1) for i in range(len(processes))])
    gnt.set_yticklabels([f'P{pid}' for pid, _, _ in processes])

    # Plotting the bars (tasks)
    colors = ['red', 'green', 'blue', 'orange', 'purple']
    for i, (pid, arrival, burst) in enumerate(processes):
        gnt.broken_barh([(start_times[i], burst)], (10 * (i + 1) - 5, 9), facecolors=(colors[i % len(colors)]))

    plt.show()

def sjf_non_preemptive(processes):
    n = len(processes)
    processes.sort(key=lambda x: x[1])  # Sort by arrival time

    start_time = 0
    completed = [False] * n
    start_times, finish_times = [0] * n, [0] * n
    turnaround_times, waiting_times = [0] * n, [0] * n

    gantt_chart = []

    for _ in range(n):
        # Find the shortest process that has arrived but not completed
        idx = -1
        min_burst = float('inf')
        for i, (pid, arrival, burst) in enumerate(processes):
            if arrival <= start_time and not completed[i] and burst < min_burst:
                min_burst = burst
                idx = i

        if idx == -1:
            start_time += 1  # If no process is ready, increment the start time
            continue

        start_times[idx] = start_time
        finish_times[idx] = start_time + processes[idx][2]  # finish time = start time + burst
        turnaround_times[idx] = finish_times[idx] - processes[idx][1]  # Turnaround = finish - arrival
        waiting_times[idx] = turnaround_times[idx] - processes[idx][2]  # Waiting = turnaround - burst

        completed[idx] = True
        start_time = finish_times[idx]

        gantt_chart.append(f"P{processes[idx][0]}")

    # Print table
    print("\nProcess\tArrival\tBurst\tFinish\tTurnaround\tWaiting")
    for i, (pid, arrival, burst) in enumerate(processes):
        print(f"P{pid}\t{arrival}\t{burst}\t{finish_times[i]}\t{turnaround_times[i]}\t\t{waiting_times[i]}")

    # Call Gantt chart plotting
    plot_gantt_chart(processes, start_times, finish_times)

    print("\nGantt Chart Sequence:")
    print(" -> ".join(gantt_chart))

# Example Input
processes = [(1, 0, 4), (2, 1, 2), (3, 2, 3), (4, 3, 5)]
sjf_non_preemptive(processes)





  c. Shortest Job First (Preemptive)
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

# Function to plot the Gantt chart for SJF Preemptive
def plot_gantt_chart_preemptive(gantt_chart):
    fig, gnt = plt.subplots()

    # Setting labels for x-axis and y-axis
    gnt.set_xlabel('Time')
    gnt.set_ylabel('Processes')

    # Extract unique processes
    processes = sorted(set(pid for _, pid in gantt_chart if pid is not None))
    process_indices = {pid: idx + 1 for idx, pid in enumerate(processes)}

    # Setting ticks on y-axis
    gnt.set_yticks([10 * process_indices[pid] for pid in processes])
    gnt.set_yticklabels([f'P{pid}' for pid in processes])

    # Setting graph limits
    gnt.set_xlim(0, max(time for time, _ in gantt_chart) + 1)
    gnt.set_ylim(0, 10 * (len(processes) + 1))

    # Colors for processes
    colors = ['red', 'green', 'blue', 'orange', 'purple']

    # Plot bars for each process in gantt_chart
    for i, (time, pid) in enumerate(gantt_chart):
        if pid is not None:
            gnt.broken_barh([(time, 1)], (10 * process_indices[pid] - 5, 9),
                            facecolors=(colors[process_indices[pid] % len(colors)]))

    # Adding legend
    handles = [mpatches.Patch(color=colors[process_indices[pid] % len(colors)], label=f'P{pid}') for pid in processes]
    plt.legend(handles=handles)

    plt.show()

# Function to implement SJF Preemptive Scheduling
def sjf_preemptive(processes):
    n = len(processes)
    remaining_burst = [burst for _, _, burst in processes]
    start_time = 0
    completed = 0
    current_time = 0
    turnaround_times, waiting_times = [0] * n, [0] * n
    finish_times = [-1] * n
    start_times = [-1] * n
    gantt_chart = []

    while completed < n:
        idx = -1
        min_burst = float('inf')
        for i in range(n):
            pid, arrival, burst = processes[i]
            if arrival <= current_time and remaining_burst[i] < min_burst and remaining_burst[i] > 0:
                min_burst = remaining_burst[i]
                idx = i

        if idx == -1:
            gantt_chart.append((current_time, None))  # No process running
            current_time += 1
            continue

        # Mark the start time if the process is first picked
        if start_times[idx] == -1:
            start_times[idx] = current_time

        gantt_chart.append((current_time, processes[idx][0]))  # Log the process ID in Gantt chart
        remaining_burst[idx] -= 1
        current_time += 1

        if remaining_burst[idx] == 0:
            completed += 1
            finish_times[idx] = current_time
            turnaround_times[idx] = finish_times[idx] - processes[idx][1]  # Turnaround time = finish - arrival
            waiting_times[idx] = turnaround_times[idx] - processes[idx][2]  # Waiting time = turnaround - burst

    # Print details
    print("\nProcess\tArrival\tBurst\tFinish\tTurnaround\tWaiting")
    for i, (pid, arrival, burst) in enumerate(processes):
        print(f"P{pid}\t{arrival}\t{burst}\t{finish_times[i]}\t{turnaround_times[i]}\t\t{waiting_times[i]}")

    # Call Gantt chart plotting
    plot_gantt_chart_preemptive(gantt_chart)

# Example Input
processes = [(1, 0, 6), (2, 1, 4), (3, 2, 2), (4, 3, 1)]
sjf_preemptive(processes)


d. Round Robin    
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

def plot_gantt_chart(processes, timeline):
    fig, gnt = plt.subplots()

    gnt.set_xlabel('Time')
    gnt.set_ylabel('Processes')

    # Get all unique processes from the timeline
    unique_processes = sorted(set(p for p, _ in timeline))

    # Set y-ticks for each process
    gnt.set_yticks([10 * (i + 1) for i in range(len(unique_processes))])
    gnt.set_yticklabels([f'P{pid}' for pid in unique_processes])

    gnt.set_xlim(0, max(t for _, t in timeline))
    gnt.set_ylim(0, 10 * (len(unique_processes) + 1))

    # Plot timeline for each process
    colors = ['red', 'green', 'blue', 'orange', 'purple']
    for pid, start in timeline:
        gnt.broken_barh([(start, 1)], (10 * (pid) - 5, 9), facecolors=(colors[(pid - 1) % len(colors)]))

    plt.show()

def round_robin(processes, quantum):
    n = len(processes)
    remaining_burst = [burst for _, _, burst in processes]
    current_time = 0
    start_times, finish_times = [0] * n, [0] * n
    turnaround_times, waiting_times = [0] * n, [0] * n
    queue = []
    timeline = []  # For Gantt chart

    for i, (pid, arrival, burst) in enumerate(processes):
        queue.append(i) if arrival == 0 else None

    index = 0
    while queue:
        i = queue.pop(0)
        pid, arrival, burst = processes[i]

        if remaining_burst[i] > quantum:
            current_time += quantum
            remaining_burst[i] -= quantum
            timeline.append((pid, current_time - quantum))
            queue.append(i)  # Re-add to queue if not finished
        else:
            current_time += remaining_burst[i]
            finish_times[i] = current_time
            timeline.append((pid, current_time - remaining_burst[i]))
            turnaround_times[i] = finish_times[i] - arrival
            waiting_times[i] = turnaround_times[i] - burst
            remaining_burst[i] = 0

        # Add processes that have arrived by now
        for j, (p, a, _) in enumerate(processes):
            if a <= current_time and j not in queue and remaining_burst[j] > 0:
                queue.append(j)

    # Print table
    print("\nProcess\tArrival\tBurst\tFinish\tTurnaround\tWaiting")
    for i, (pid, arrival, burst) in enumerate(processes):
        print(f"P{pid}\t{arrival}\t{burst}\t{finish_times[i]}\t{turnaround_times[i]}\t\t{waiting_times[i]}")

    plot_gantt_chart(processes, timeline)

# Example input
processes = [(1, 0, 5), (2, 1, 3), (3, 2, 8), (4, 3, 6)]
time_quantum = 2
round_robin(processes, time_quantum)


  e. Priority (Non-preemptive)
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

def plot_gantt_chart(processes, start_times, finish_times):
    fig, gnt = plt.subplots()

    gnt.set_xlabel('Time')
    gnt.set_ylabel('Processes')

    gnt.set_yticks([10 * (i + 1) for i in range(len(processes))])
    gnt.set_yticklabels([f'P{pid}' for pid, _, _, _ in processes])

    gnt.set_xlim(0, max(finish_times) + 5)
    gnt.set_ylim(0, 10 * (len(processes) + 1))

    colors = ['red', 'green', 'blue', 'orange', 'purple']
    for i, (pid, arrival, burst, priority) in enumerate(processes):
        gnt.broken_barh([(start_times[i], burst)], (10 * (i + 1) - 5, 9), facecolors=(colors[i % len(colors)]))

    handles = [mpatches.Patch(color=colors[i % len(colors)], label=f'P{pid}') for i, (pid, _, _, _) in enumerate(processes)]
    plt.legend(handles=handles)

    plt.show()

def priority_non_preemptive(processes):
    n = len(processes)
    processes.sort(key=lambda x: (x[1], x[3]))  # Sort by arrival and priority

    start_time = 0
    completed = [False] * n
    start_times, finish_times = [0] * n, [0] * n
    turnaround_times, waiting_times = [0] * n, [0] * n

    for _ in range(n):
        idx = -1
        highest_priority = float('inf')
        for i, (pid, arrival, burst, priority) in enumerate(processes):
            if arrival <= start_time and not completed[i] and priority < highest_priority:
                highest_priority = priority
                idx = i

        if idx == -1:
            start_time += 1  # If no process is ready, increment the start time
            continue

        start_times[idx] = start_time
        finish_times[idx] = start_time + processes[idx][2]
        turnaround_times[idx] = finish_times[idx] - processes[idx][1]
        waiting_times[idx] = turnaround_times[idx] - processes[idx][2]

        completed[idx] = True
        start_time = finish_times[idx]

    # Print table
    print("\nProcess\tArrival\tBurst\tPriority\tFinish\tTurnaround\tWaiting")
    for i, (pid, arrival, burst, priority) in enumerate(processes):
        print(f"P{pid}\t{arrival}\t{burst}\t{priority}\t\t{finish_times[i]}\t{turnaround_times[i]}\t\t{waiting_times[i]}")

    plot_gantt_chart(processes, start_times, finish_times)

# Example Input
processes = [(1, 0, 4, 2), (2, 1, 3, 1), (3, 2, 1, 4), (4, 3, 2, 3)]
priority_non_preemptive(processes)



 f. Priority (preemptive)
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

def plot_gantt_chart(processes, timeline):
    fig, gnt = plt.subplots()

    gnt.set_xlabel('Time')
    gnt.set_ylabel('Processes')

    # Get all unique processes from the timeline
    unique_processes = sorted(set(p for p, _ in timeline))

    gnt.set_yticks([10 * (i + 1) for i in range(len(unique_processes))])
    gnt.set_yticklabels([f'P{pid}' for pid in unique_processes])

    gnt.set_xlim(0, max(t for _, t in timeline) + 1)
    gnt.set_ylim(0, 10 * (len(unique_processes) + 1))

    colors = ['red', 'green', 'blue', 'orange', 'purple']
    for pid, start in timeline:
        gnt.broken_barh([(start, 1)], (10 * (pid) - 5, 9), facecolors=(colors[(pid - 1) % len(colors)]))

    handles = [mpatches.Patch(color=colors[i % len(colors)], label=f'P{i + 1}') for i in range(len(unique_processes))]
    plt.legend(handles=handles)

    plt.title("Gantt Chart")
    plt.show()

def preemptive_priority(processes):
    n = len(processes)
    # Sort processes by arrival time and then by priority
    processes.sort(key=lambda x: (x[1], x[3]))

    current_time = 0
    finish_times = [0] * n
    remaining_burst = [burst for _, _, burst, _ in processes]
    timeline = []  # For Gantt chart

    while True:
        # Find the process with the highest priority that has arrived
        idx = -1
        highest_priority = float('inf')
        for i, (pid, arrival, burst, priority) in enumerate(processes):
            if arrival <= current_time and remaining_burst[i] > 0 and priority < highest_priority:
                highest_priority = priority
                idx = i

        if idx == -1:
            # If no process is ready, increment time
            current_time += 1
            continue

        # Run the selected process for 1 time unit
        remaining_burst[idx] -= 1
        timeline.append((processes[idx][0], current_time))

        if remaining_burst[idx] == 0:
            finish_times[idx] = current_time + 1

        current_time += 1

        # If the process has finished, we might need to check for others
        if remaining_burst[idx] == 0:
            for i in range(n):
                if remaining_burst[i] == 0 and finish_times[i] == 0:
                    finish_times[i] = current_time

        # Check if all processes are finished
        if all(burst == 0 for burst in remaining_burst):
            break

    # Calculate turnaround and waiting times
    turnaround_times = [finish_times[i] - processes[i][1] for i in range(n)]
    waiting_times = [turnaround_times[i] - processes[i][2] for i in range(n)]

    # Print table
    print("\nProcess\tArrival\tBurst\tPriority\tFinish\tTurnaround\tWaiting")
    for i, (pid, arrival, burst, priority) in enumerate(processes):
        print(f"P{pid}\t{arrival}\t{burst}\t{priority}\t\t{finish_times[i]}\t{turnaround_times[i]}\t\t{waiting_times[i]}")

    plot_gantt_chart(processes, timeline)

# Example Input
processes = [(1, 0, 4, 2), (2, 1, 3, 1), (3, 2, 1, 4), (4, 3, 2, 3)]
preemptive_priority(processes)



bankers algo:

class BankersAlgorithm:
    def __init__(self, processes, available, max_need, allocation):
        self.processes = processes
        self.available = available
        self.max_need = max_need
        self.allocation = allocation
        self.need = [[max_need[i][j] - allocation[i][j] for j in range(len(available))] for i in range(processes)]

    def is_safe(self):
        work = self.available[:]
        finish = [False] * self.processes
        safe_sequence = []
    
        while len(safe_sequence) < self.processes:
            found = False
            for i in range(self.processes):
                if not finish[i] and all(self.need[i][j] <= work[j] for j in range(len(work))):
                    work = [work[j] + self.allocation[i][j] for j in range(len(work))]
                    safe_sequence.append(i)
                    finish[i] = True
                    found = True
                    break
            if not found:
                return False, []

        return True, safe_sequence

# Example usage
if __name__ == "__main__":
    processes = 5
    available = [3, 3, 2]
    max_need = [
        [7, 5, 3],
        [3, 2, 2],
        [9, 0, 2],
        [2, 2, 2],
        [4, 3, 3]
    ]
    allocation = [
        [0, 1, 0],
        [2, 0, 0],
        [3, 0, 2],
        [2, 1, 1],
        [0, 0, 2]
    ]

    banker = BankersAlgorithm(processes, available, max_need, allocation)
    is_safe, sequence = banker.is_safe()

    if is_safe:
        print("The system is in a safe state.")
        print(f"Safe Sequence: {sequence}")
    else:
        print("The system is not in a safe state.")








